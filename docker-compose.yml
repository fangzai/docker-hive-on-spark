version: '3.2'

# Feel free to modify this file to suit your needs.
x-airflow-common:
  &airflow-common
  # In order to add custom dependencies or upgrade provider packages you can use your extended image.
  # Comment the image line, place your Dockerfile in the directory where you placed the docker-compose.yaml
  # and uncomment the "build" line below, Then run `docker-compose build` to build the images.
  image: ${AIRFLOW_IMAGE_NAME:-apache/airflow:2.8.3}
  # build: .
  environment:
    &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'true'
    AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session'
    # yamllint disable rule:line-length
    # Use simple http server on scheduler for health checks
    # See https://airflow.apache.org/docs/apache-airflow/stable/administration-and-deployment/logging-monitoring/check-health.html#scheduler-health-check-server
    # yamllint enable rule:line-length
    AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
    # WARNING: Use _PIP_ADDITIONAL_REQUIREMENTS option ONLY for a quick checks
    # for other purpose (development, test and especially production usage) build/extend Airflow image.
    _PIP_ADDITIONAL_REQUIREMENTS: ${_PIP_ADDITIONAL_REQUIREMENTS:-}
  volumes:
    - ${AIRFLOW_PROJ_DIR:-.}/airflow/dags:/opt/airflow/dags
    - ${AIRFLOW_PROJ_DIR:-.}/airflow/logs:/opt/airflow/logs
    - ${AIRFLOW_PROJ_DIR:-.}/airflow/config:/opt/airflow/config
    - ${AIRFLOW_PROJ_DIR:-.}/airflow/plugins:/opt/airflow/plugins
  user: "${AIRFLOW_UID:-50000}:0"
  depends_on:
    &airflow-common-depends-on
    redis:
      condition: service_healthy
    postgres:
      condition: service_healthy

services:
  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 10s
      retries: 5
      start_period: 5s
    restart: always

  redis:
    image: redis:latest
    expose:
      - 6379
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 30s
      retries: 50
      start_period: 30s
    restart: always

  airflow-webserver:
    <<: *airflow-common
    command: webserver
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8974/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-worker:
    <<: *airflow-common
    command: celery worker
    healthcheck:
      # yamllint disable rule:line-length
      test:
        - "CMD-SHELL"
        - 'celery --app airflow.providers.celery.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}" || celery --app airflow.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}"'
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    environment:
      <<: *airflow-common-env
      # Required to handle warm shutdown of the celery workers properly
      # See https://airflow.apache.org/docs/docker-stack/entrypoint.html#signal-propagation
      DUMB_INIT_SETSID: "0"
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-triggerer:
    <<: *airflow-common
    command: triggerer
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type TriggererJob --hostname "$${HOSTNAME}"']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-init:
    <<: *airflow-common
    entrypoint: /bin/bash
    # yamllint disable rule:line-length
    command:
      - -c
      - |
        if [[ -z "${AIRFLOW_UID}" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: AIRFLOW_UID not set!\e[0m"
          echo "If you are on Linux, you SHOULD follow the instructions below to set "
          echo "AIRFLOW_UID environment variable, otherwise files will be owned by root."
          echo "For other operating systems you can get rid of the warning with manually created .env file:"
          echo "    See: https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#setting-the-right-airflow-user"
          echo
        fi
        one_meg=1048576
        mem_available=$$(($$(getconf _PHYS_PAGES) * $$(getconf PAGE_SIZE) / one_meg))
        cpus_available=$$(grep -cE 'cpu[0-9]+' /proc/stat)
        disk_available=$$(df / | tail -1 | awk '{print $$4}')
        warning_resources="false"
        if (( mem_available < 4000 )) ; then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough memory available for Docker.\e[0m"
          echo "At least 4GB of memory required. You have $$(numfmt --to iec $$((mem_available * one_meg)))"
          echo
          warning_resources="true"
        fi
        if (( cpus_available < 2 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough CPUS available for Docker.\e[0m"
          echo "At least 2 CPUs recommended. You have $${cpus_available}"
          echo
          warning_resources="true"
        fi
        if (( disk_available < one_meg * 10 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough Disk space available for Docker.\e[0m"
          echo "At least 10 GBs recommended. You have $$(numfmt --to iec $$((disk_available * 1024 )))"
          echo
          warning_resources="true"
        fi
        if [[ $${warning_resources} == "true" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: You have not enough resources to run Airflow (see above)!\e[0m"
          echo "Please follow the instructions to increase amount of resources available:"
          echo "   https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#before-you-begin"
          echo
        fi
        mkdir -p /sources/logs /sources/dags /sources/plugins
        chown -R "${AIRFLOW_UID}:0" /sources/{logs,dags,plugins}
        exec /entrypoint airflow version
    # yamllint enable rule:line-length
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_MIGRATE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
      _PIP_ADDITIONAL_REQUIREMENTS: ''
    user: "0:0"
    volumes:
      - ${AIRFLOW_PROJ_DIR:-.}:/sources

  airflow-cli:
    <<: *airflow-common
    profiles:
      - debug
    environment:
      <<: *airflow-common-env
      CONNECTION_CHECK_MAX_COUNT: "0"
    # Workaround for entrypoint issue. See: https://github.com/apache/airflow/issues/16252
    command:
      - bash
      - -c
      - airflow

  # You can enable flower by adding "--profile flower" option e.g. docker-compose --profile flower up
  # or by explicitly targeted on the command line e.g. docker-compose up flower.
  # See: https://docs.docker.com/compose/profiles/
  flower:
    <<: *airflow-common
    command: celery flower
    profiles:
      - flower
    ports:
      - "5555:5555"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:5555/"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  jenkins:
    image: jenkins/jenkins:lts
    privileged: true
    user: root
    ports:
      - 8081:8080
      - 50000:50000
    container_name: jenkins-lts
    volumes:
      - ~/docker_data/jenkins_home:/var/jenkins_home
      - /var/run/docker.sock:/var/run/docker.sock
      - /usr/local/bin/docker:/usr/local/bin/docker
  oracle-db:
    image: store/oracle/database-enterprise:12.2.0.1
    container_name: oracle-db
    ports:
      - "1521:1521"
    environment:
      - ORACLE_PWD=your_password
      - ORACLE_CHARACTERSET=AL32UTF8
      - ORACLE_SID=ORCL
    volumes:
      - ./oracle-data:/opt/oracle/oradata
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:1521/status"]
      interval: 30s
      timeout: 10s
      retries: 30

  # psqlhms: 
  #   image: anzupop/spark_hive_cluster:postgresql-hms
  #   hostname: psqlhms
  #   volumes:
  #     # postgresql data
  #     - type: bind
  #       source: ./.persistence/db
  #       target: /var/lib/postgresql/data
  #   environment:
  #     - POSTGRES_PASSWORD=hive
  # node2:
  #   hostname: node2
  #   image: anzupop/spark_hive_cluster:hive
  #   entrypoint: /entrypoint.sh
  #   ports:
  #     # spark worker web UI port
  #     - "20021:8081"
  #   volumes:
  #     # exchange
  #     - type: bind
  #       source: ./spark/exchange/
  #       target: /exchange
  #     # custom entrypoint
  #     - type: bind
  #       source: ./spark/entrypoint.sh
  #       target: /entrypoint.sh
  #     # hadoop image specified
  #     - type: bind
  #       source: ./hadoop/conf/core-site.xml
  #       target: /home/hadoop/hadoop/etc/hadoop/core-site.xml
  #     - type: bind
  #       source: ./hadoop/conf/hdfs-site.xml
  #       target: /home/hadoop/hadoop/etc/hadoop/hdfs-site.xml
  #     - type: bind
  #       source: ./hadoop/conf/mapred-site.xml
  #       target: /home/hadoop/hadoop/etc/hadoop/mapred-site.xml
  #     - type: bind
  #       source: ./hadoop/conf/yarn-site.xml
  #       target: /home/hadoop/hadoop/etc/hadoop/yarn-site.xml
  #     - type: bind
  #       source: ./hadoop/conf/workers
  #       target: /home/hadoop/hadoop/etc/hadoop/workers
  #     - type: bind
  #       source: ./hadoop/conf/hadoop-env.sh
  #       target: /home/hadoop/hadoop/etc/hadoop/hadoop-env.sh
  #     # spark image specified
  #     - type: bind
  #       source: ./hadoop/conf/workers
  #       target: /home/hadoop/spark/conf/slaves
  #     - type: bind
  #       source: ./spark/conf/spark-env.sh
  #       target: /home/hadoop/spark/conf/spark-env.sh
  #     - type: bind
  #       source: ./spark/conf/spark-defaults.conf
  #       target: /home/hadoop/spark/conf/spark-defaults.conf
  #   expose:
  #     - "1-65535"
  #   depends_on:
  #     - psqlhms
  # node3:
  #   hostname: node3
  #   image: anzupop/spark_hive_cluster:hive
  #   entrypoint: /entrypoint.sh
  #   ports:
  #     # spark worker web UI port
  #     - "20031:8081"
  #   volumes:
  #     # exchange
  #     - type: bind
  #       source: ./spark/exchange/
  #       target: /exchange
  #     # custom entrypoint
  #     - type: bind
  #       source: ./spark/entrypoint.sh
  #       target: /entrypoint.sh
  #     # hadoop image specified
  #     - type: bind
  #       source: ./hadoop/conf/core-site.xml
  #       target: /home/hadoop/hadoop/etc/hadoop/core-site.xml
  #     - type: bind
  #       source: ./hadoop/conf/hdfs-site.xml
  #       target: /home/hadoop/hadoop/etc/hadoop/hdfs-site.xml
  #     - type: bind
  #       source: ./hadoop/conf/mapred-site.xml
  #       target: /home/hadoop/hadoop/etc/hadoop/mapred-site.xml
  #     - type: bind
  #       source: ./hadoop/conf/yarn-site.xml
  #       target: /home/hadoop/hadoop/etc/hadoop/yarn-site.xml
  #     - type: bind
  #       source: ./hadoop/conf/workers
  #       target: /home/hadoop/hadoop/etc/hadoop/workers
  #     - type: bind
  #       source: ./hadoop/conf/hadoop-env.sh
  #       target: /home/hadoop/hadoop/etc/hadoop/hadoop-env.sh
  #     # spark image specified
  #     - type: bind
  #       source: ./hadoop/conf/workers
  #       target: /home/hadoop/spark/conf/slaves
  #     - type: bind
  #       source: ./spark/conf/spark-env.sh
  #       target: /home/hadoop/spark/conf/spark-env.sh
  #     - type: bind
  #       source: ./spark/conf/spark-defaults.conf
  #       target: /home/hadoop/spark/conf/spark-defaults.conf
  #   expose:
  #     - "1-65535"
  #   depends_on:
  #     - psqlhms
  # nodemaster:
  #   hostname: nodemaster
  #   image: anzupop/spark_hive_cluster:hive
  #   ports:
  #     # spark master web UI port
  #     - "20010:8080"
  #     # hadoop web UI port
  #     - "20012:8088"
  #   entrypoint: /entrypoint.sh
  #   volumes:
  #     # exchange
  #     - type: bind
  #       source: ./hive/exchange/
  #       target: /exchange
  #     # custom entrypoint
  #     - type: bind
  #       source: ./hive/entrypoint.sh
  #       target: /entrypoint.sh
  #     # hadoop image specified
  #     - type: bind
  #       source: ./hadoop/conf/core-site.xml
  #       target: /home/hadoop/hadoop/etc/hadoop/core-site.xml
  #     - type: bind
  #       source: ./hadoop/conf/hdfs-site.xml
  #       target: /home/hadoop/hadoop/etc/hadoop/hdfs-site.xml
  #     - type: bind
  #       source: ./hadoop/conf/mapred-site.xml
  #       target: /home/hadoop/hadoop/etc/hadoop/mapred-site.xml
  #     - type: bind
  #       source: ./hadoop/conf/yarn-site.xml
  #       target: /home/hadoop/hadoop/etc/hadoop/yarn-site.xml
  #     - type: bind
  #       source: ./hadoop/conf/workers
  #       target: /home/hadoop/hadoop/etc/hadoop/workers
  #     - type: bind
  #       source: ./hadoop/conf/hadoop-env.sh
  #       target: /home/hadoop/hadoop/etc/hadoop/hadoop-env.sh
  #     # spark image specified
  #     - type: bind
  #       source: ./hadoop/conf/workers
  #       target: /home/hadoop/spark/conf/slaves
  #     - type: bind
  #       source: ./spark/conf/spark-env.sh
  #       target: /home/hadoop/spark/conf/spark-env.sh
  #     - type: bind
  #       source: ./spark/conf/spark-defaults.conf
  #       target: /home/hadoop/spark/conf/spark-defaults.conf
  #     # hive image specified
  #     - type: bind
  #       source: ./hive/conf/hive-site.xml
  #       target: /home/hadoop/hive/conf/hive-site.xml
  #   depends_on:
  #     - psqlhms
  #   expose:
  #     - "1-65535"
  #     # - node2
  #     # - node3
  # edge:
  #   hostname: edge
  #   image: anzupop/spark_hive_cluster:edge
  #   entrypoint: /entrypoint.sh
  #   volumes:
  #     # custom entrypoint
  #     - type: bind
  #       source: ./edge/entrypoint.sh
  #       target: /entrypoint.sh
  #     # hadoop image specified
  #     - type: bind
  #       source: ./hadoop/conf/core-site.xml
  #       target: /home/hadoop/hadoop/etc/hadoop/core-site.xml
  #     - type: bind
  #       source: ./hadoop/conf/hdfs-site.xml
  #       target: /home/hadoop/hadoop/etc/hadoop/hdfs-site.xml
  #     - type: bind
  #       source: ./hadoop/conf/mapred-site.xml
  #       target: /home/hadoop/hadoop/etc/hadoop/mapred-site.xml
  #     - type: bind
  #       source: ./hadoop/conf/yarn-site.xml
  #       target: /home/hadoop/hadoop/etc/hadoop/yarn-site.xml
  #     - type: bind
  #       source: ./hadoop/conf/workers
  #       target: /home/hadoop/hadoop/etc/hadoop/workers
  #     # spark image specified
  #     - type: bind
  #       source: ./hadoop/conf/workers
  #       target: /home/hadoop/spark/conf/slaves
  #     # hive image specified
  #     - type: bind
  #       source: ./hive/conf/hive-site.xml
  #       target: /home/hadoop/hive/conf/hive-site.xml
  #   depends_on:
  #     - psqlhms
  #     - nodemaster
  #     - node2
  #     - node3
  # nifi:
  #   hostname: nifi
  #   image: anzupop/spark_hive_cluster:nifi
  #   ports:
  #     - "28080:8080"
  #   entrypoint: /entrypoint.sh
  #   volumes:
  #     # custom entrypoint
  #     - type: bind
  #       source: ./nifi/entrypoint.sh
  #       target: /entrypoint.sh
  #     # nifi image specified
  #     - type: bind
  #       source: ./nifi/conf/nifi.properties
  #       target: /home/hadoop/nifi/conf/nifi.properties
  #   depends_on:
  #     - psqlhms
  #     - nodemaster
  #     - node2
  #     - node3

volumes:
  postgres-db-volume:    
    

